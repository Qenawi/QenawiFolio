{"status":"ok","feed":{"url":"https://medium.com/feed/@qenawi","title":"Stories by Ahmed Mohamed Hussien&amp;lt;Qenawi&amp;gt; on Medium","link":"https://medium.com/@Qenawi?source=rss-d603c7900927------2","author":"","description":"Stories by Ahmed Mohamed Hussien&lt;Qenawi&gt; on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/2*LeznyJ4rWC5jWrTZ6j-kHA.jpeg"},"items":[{"title":"Retrofit-Callback And Either","pubDate":"2020-05-16 19:43:42","link":"https://medium.com/@Qenawi/retrofit-callback-and-either-3f0ca09f4c5?source=rss-d603c7900927------2","guid":"https://medium.com/p/3f0ca09f4c5","author":"Ahmed Mohamed Hussien&lt;Qenawi&gt;","thumbnail":"https://cdn-images-1.medium.com/max/1024/0*2-G0FbFz1Cm8oPJl","description":"\n<p>As you might notice, functional programming paradigm is getting popular in Android world. Some developers try to use a closer implementation to the pure functional programming paradigm,meanwhile others developers are taking part of some concepts, or <a href=\"https://en.wikipedia.org/wiki/Monad_(functional_programming)\">monads</a> that can be helpful on their\u00a0code.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*2-G0FbFz1Cm8oPJl\"><figcaption>Photo by <a href=\"https://unsplash.com/@christianw?utm_source=medium&amp;utm_medium=referral\">Christian Wiediger</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><blockquote><strong>Request-Call</strong></blockquote>\n<blockquote>Retrofit call return Json-response</blockquote>\n<pre>@GET(<strong>url</strong>)<br>fun <strong>check_is_with_in_location</strong>(@QueryMap data: Map&lt;String, String&gt;):Call&lt;JsonElement&gt;</pre>\n<blockquote><strong>Use Case</strong></blockquote>\n<blockquote>use-case handle background thread and deliver result in main thread using Dispatchers and Kotlin-Coroutines,param class contain query data if\u00a0any</blockquote>\n<pre>class MyUseCase(<br>    val repo: MyRepo,<br>    val scope: CoroutineScope,<br>    val dispatcher: CoroutineDispatcher<br>) : BaseUseCase&lt;Any, MyUseCase.Params&gt;(scope, dispatcher) {<br><br><br>    fun doWork(params: Params, onResult: (Either&lt;Failure, MyDataResponse&gt;) -&gt; Unit = {}) {<br>        scope.launch {<br>            val res = repo.doWork(params)<br>            withContext(dispatcher)<br>            {<br>                onResult(res)<br>            }<br>        }<br><br>    }<br>    class Params(){<br>        fun hashmap()=HashMap&lt;String,String&gt;()<br>    }<br>}</pre>\n<blockquote><strong>Repository</strong></blockquote>\n<p>networkHandler -&gt;check if there is a stable internet connection before executing retrofit\u00a0call</p>\n<p>retrofitService -&gt; contain retrofit object and implement API interface</p>\n<p>request -&gt; function handle retrofit request and return either&lt;Fail,Response&gt;</p>\n<pre>interface <strong>MyRepo</strong>{<br>    fun doWork(params: MyUseCase.Params): Either&lt;Failure, MyDataResponse&gt;<br>    class Network @Inject constructor(<br>        val networkHandler: NetworkHandler,<br>        val retrofitService: HomeService<br>    ) : <strong>MyRepo</strong> {<br>        override fun doWork(params: MyUseCase.Params): Either&lt;Failure, MyDataResponse&gt; {<br>           return when (networkHandler.isConnected) {<br>           false, null -&gt;Either.Left(Failure.NetworkConnection)<br>           true -&gt; request(retrofitService.doWork(params.hashmap()),<br> { j -&gt; j.mMapToObject() }<br>,<br>                    { v -&gt;<br>                        v?.run { true } ?: false<br>                    }, dummy_MyDataResponse()<br>                )<br>            }<br>        }<br>    }<br>}</pre>\n<blockquote><strong>Data-Response</strong></blockquote>\n<pre>data class MyDataResponse(@SerializedName(\"id\") val <strong>q_id</strong>: Int,<br>                    @SerializedName(\"question\") val <strong>q_content</strong>:String<br>)</pre>\n<blockquote><strong>Either</strong></blockquote>\n<pre>sealed class Either&lt;out L, out R&gt; {<br><em>/** * Represents the left side of [Either] class which by convention is a \"Failure\". */<br></em>data class Left&lt;out L&gt;(val <strong>a</strong>: L) : Either&lt;L, Nothing&gt;()<br><br><em>/** * Represents the right side of [Either] class which by convention is a \"Success\". */<br></em>data class Right&lt;out R&gt;(val <strong>b</strong>: R) : Either&lt;Nothing, R&gt;()<br><br>    val <strong>isRight </strong>get() = this is Right&lt;R&gt;<br>    val <strong>isLeft </strong>get() = this is Left&lt;L&gt;<br><br>    fun &lt;L&gt; <strong>left</strong>(a: L) = Left(a)<br>    fun &lt;R&gt; <strong>right</strong>(b: R) = Right(b)<br><br>    fun <strong>either</strong>(fnl: (L) -&gt; Any, fnr: (R) -&gt; Any): Any =<br>        when (this) {<br>            is Left -&gt; fnl(<strong>a</strong>)<br>            is Right -&gt; fnr(<strong>b</strong>)<br>        }<br>}<em><br></em>fun &lt;A, B, C&gt; ((A) -&gt; B).<strong>c</strong>(f: (B) -&gt; C): (A) -&gt; C = <strong>{<br></strong>f(this(<strong>it</strong>))<br><strong>}<br><br></strong>fun &lt;T, L, R&gt; Either&lt;L, R&gt;.<strong>flatMap</strong>(fn: (R) -&gt; Either&lt;L, T&gt;): Either&lt;L, T&gt; =<br>    when (this) {<br>        is Either.Left -&gt; Either.Left(<strong>a</strong>)<br>        is Either.Right -&gt; fn(<strong>b</strong>)<br>    }<br><br>fun &lt;T, L, R&gt; Either&lt;L, R&gt;.<strong>map</strong>(fn: (R) -&gt; (T)): Either&lt;L, T&gt; = this.<strong>flatMap</strong>(fn.<strong>c</strong>(::right))</pre>\n<p><em>#</em><a href=\"https://proandroiddev.com/kotlins-nothing-type-946de7d464fb\"><em>Credits goes to Alex Hart </em></a><em>for Either\u00a0Imp</em></p>\n<p><strong>Request</strong></p>\n<pre>fun &lt;T, R&gt; <strong>request</strong>(<br>    call: Call&lt;T&gt;,<br>    transform: (T) -&gt; R?,<br>    validate: (R?) -&gt; Boolean,<br>    default: R<br>): Either&lt;Failure, R&gt; {<br>    return try {<br>        val response = call.execute()<br>        when (response.<strong>isSuccessful</strong>) {<br>            true -&gt; {<br>                val mResponseBodyHolder = response.body()<br><br>                mResponseBodyHolder?.<strong>let { </strong>obj <strong>-&gt;<br></strong>val trans_out = transform(obj)<br>                    val valid_out = validate(trans_out)<br>                    if (valid_out) Either.Right(trans_out ?: default)<br>                    else Either.Left(<strong>errorBodyToString</strong>(obj.toString()))<br><br><strong>} </strong>?: Either.Left(Failure.ServerError)<br>            }<br>            false -&gt;{<br>                return if (response.code() == <em>Auth_code</em>) Either.Left(Failure.AuthrizationError)<br>                else {Either.Left(<strong>errorBodyToString</strong>(response.errorBody()?.string() ?: \"\"))}<br>            }<br>        }<br>    } catch (exception: Throwable) {<br>        Either.Left(Failure.ServerError.<strong>setArgs</strong>(exception.<strong>message</strong>, exception))<br>    }<br>}</pre>\n<blockquote>Handling-Either inside view/viewModel</blockquote>\n<pre><strong>useCase</strong>.doWork(MyUseCase.Params())<br><strong>{<br>    it</strong>.either(::handleFailure, ::handleSucess)<br><strong>}<br></strong>private fun handleSucess(res: MyDataResponse) {<br>   // play with result<br>}<br>private fun handleFailure(res: Failure) {<br>   // play with result<br>}</pre>\n<blockquote>That\u2019s it.</blockquote>\n<p><a href=\"https://github.com/Qenawi\">https://github.com/Qenawi</a></p>\n<p>Feel free to leave a comment or give a clap\u00a0\ud83d\udc4f</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3f0ca09f4c5\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>As you might notice, functional programming paradigm is getting popular in Android world. Some developers try to use a closer implementation to the pure functional programming paradigm,meanwhile others developers are taking part of some concepts, or <a href=\"https://en.wikipedia.org/wiki/Monad_(functional_programming)\">monads</a> that can be helpful on their\u00a0code.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*2-G0FbFz1Cm8oPJl\"><figcaption>Photo by <a href=\"https://unsplash.com/@christianw?utm_source=medium&amp;utm_medium=referral\">Christian Wiediger</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><blockquote><strong>Request-Call</strong></blockquote>\n<blockquote>Retrofit call return Json-response</blockquote>\n<pre>@GET(<strong>url</strong>)<br>fun <strong>check_is_with_in_location</strong>(@QueryMap data: Map&lt;String, String&gt;):Call&lt;JsonElement&gt;</pre>\n<blockquote><strong>Use Case</strong></blockquote>\n<blockquote>use-case handle background thread and deliver result in main thread using Dispatchers and Kotlin-Coroutines,param class contain query data if\u00a0any</blockquote>\n<pre>class MyUseCase(<br>    val repo: MyRepo,<br>    val scope: CoroutineScope,<br>    val dispatcher: CoroutineDispatcher<br>) : BaseUseCase&lt;Any, MyUseCase.Params&gt;(scope, dispatcher) {<br><br><br>    fun doWork(params: Params, onResult: (Either&lt;Failure, MyDataResponse&gt;) -&gt; Unit = {}) {<br>        scope.launch {<br>            val res = repo.doWork(params)<br>            withContext(dispatcher)<br>            {<br>                onResult(res)<br>            }<br>        }<br><br>    }<br>    class Params(){<br>        fun hashmap()=HashMap&lt;String,String&gt;()<br>    }<br>}</pre>\n<blockquote><strong>Repository</strong></blockquote>\n<p>networkHandler -&gt;check if there is a stable internet connection before executing retrofit\u00a0call</p>\n<p>retrofitService -&gt; contain retrofit object and implement API interface</p>\n<p>request -&gt; function handle retrofit request and return either&lt;Fail,Response&gt;</p>\n<pre>interface <strong>MyRepo</strong>{<br>    fun doWork(params: MyUseCase.Params): Either&lt;Failure, MyDataResponse&gt;<br>    class Network @Inject constructor(<br>        val networkHandler: NetworkHandler,<br>        val retrofitService: HomeService<br>    ) : <strong>MyRepo</strong> {<br>        override fun doWork(params: MyUseCase.Params): Either&lt;Failure, MyDataResponse&gt; {<br>           return when (networkHandler.isConnected) {<br>           false, null -&gt;Either.Left(Failure.NetworkConnection)<br>           true -&gt; request(retrofitService.doWork(params.hashmap()),<br> { j -&gt; j.mMapToObject() }<br>,<br>                    { v -&gt;<br>                        v?.run { true } ?: false<br>                    }, dummy_MyDataResponse()<br>                )<br>            }<br>        }<br>    }<br>}</pre>\n<blockquote><strong>Data-Response</strong></blockquote>\n<pre>data class MyDataResponse(@SerializedName(\"id\") val <strong>q_id</strong>: Int,<br>                    @SerializedName(\"question\") val <strong>q_content</strong>:String<br>)</pre>\n<blockquote><strong>Either</strong></blockquote>\n<pre>sealed class Either&lt;out L, out R&gt; {<br><em>/** * Represents the left side of [Either] class which by convention is a \"Failure\". */<br></em>data class Left&lt;out L&gt;(val <strong>a</strong>: L) : Either&lt;L, Nothing&gt;()<br><br><em>/** * Represents the right side of [Either] class which by convention is a \"Success\". */<br></em>data class Right&lt;out R&gt;(val <strong>b</strong>: R) : Either&lt;Nothing, R&gt;()<br><br>    val <strong>isRight </strong>get() = this is Right&lt;R&gt;<br>    val <strong>isLeft </strong>get() = this is Left&lt;L&gt;<br><br>    fun &lt;L&gt; <strong>left</strong>(a: L) = Left(a)<br>    fun &lt;R&gt; <strong>right</strong>(b: R) = Right(b)<br><br>    fun <strong>either</strong>(fnl: (L) -&gt; Any, fnr: (R) -&gt; Any): Any =<br>        when (this) {<br>            is Left -&gt; fnl(<strong>a</strong>)<br>            is Right -&gt; fnr(<strong>b</strong>)<br>        }<br>}<em><br></em>fun &lt;A, B, C&gt; ((A) -&gt; B).<strong>c</strong>(f: (B) -&gt; C): (A) -&gt; C = <strong>{<br></strong>f(this(<strong>it</strong>))<br><strong>}<br><br></strong>fun &lt;T, L, R&gt; Either&lt;L, R&gt;.<strong>flatMap</strong>(fn: (R) -&gt; Either&lt;L, T&gt;): Either&lt;L, T&gt; =<br>    when (this) {<br>        is Either.Left -&gt; Either.Left(<strong>a</strong>)<br>        is Either.Right -&gt; fn(<strong>b</strong>)<br>    }<br><br>fun &lt;T, L, R&gt; Either&lt;L, R&gt;.<strong>map</strong>(fn: (R) -&gt; (T)): Either&lt;L, T&gt; = this.<strong>flatMap</strong>(fn.<strong>c</strong>(::right))</pre>\n<p><em>#</em><a href=\"https://proandroiddev.com/kotlins-nothing-type-946de7d464fb\"><em>Credits goes to Alex Hart </em></a><em>for Either\u00a0Imp</em></p>\n<p><strong>Request</strong></p>\n<pre>fun &lt;T, R&gt; <strong>request</strong>(<br>    call: Call&lt;T&gt;,<br>    transform: (T) -&gt; R?,<br>    validate: (R?) -&gt; Boolean,<br>    default: R<br>): Either&lt;Failure, R&gt; {<br>    return try {<br>        val response = call.execute()<br>        when (response.<strong>isSuccessful</strong>) {<br>            true -&gt; {<br>                val mResponseBodyHolder = response.body()<br><br>                mResponseBodyHolder?.<strong>let { </strong>obj <strong>-&gt;<br></strong>val trans_out = transform(obj)<br>                    val valid_out = validate(trans_out)<br>                    if (valid_out) Either.Right(trans_out ?: default)<br>                    else Either.Left(<strong>errorBodyToString</strong>(obj.toString()))<br><br><strong>} </strong>?: Either.Left(Failure.ServerError)<br>            }<br>            false -&gt;{<br>                return if (response.code() == <em>Auth_code</em>) Either.Left(Failure.AuthrizationError)<br>                else {Either.Left(<strong>errorBodyToString</strong>(response.errorBody()?.string() ?: \"\"))}<br>            }<br>        }<br>    } catch (exception: Throwable) {<br>        Either.Left(Failure.ServerError.<strong>setArgs</strong>(exception.<strong>message</strong>, exception))<br>    }<br>}</pre>\n<blockquote>Handling-Either inside view/viewModel</blockquote>\n<pre><strong>useCase</strong>.doWork(MyUseCase.Params())<br><strong>{<br>    it</strong>.either(::handleFailure, ::handleSucess)<br><strong>}<br></strong>private fun handleSucess(res: MyDataResponse) {<br>   // play with result<br>}<br>private fun handleFailure(res: Failure) {<br>   // play with result<br>}</pre>\n<blockquote>That\u2019s it.</blockquote>\n<p><a href=\"https://github.com/Qenawi\">https://github.com/Qenawi</a></p>\n<p>Feel free to leave a comment or give a clap\u00a0\ud83d\udc4f</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3f0ca09f4c5\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["callback","kotlin","retrofit","android","error-handling"]},{"title":"RecyclerView Filterable","pubDate":"2020-05-16 19:22:38","link":"https://medium.com/@Qenawi/recyclerview-filterable-158c8a75bb90?source=rss-d603c7900927------2","guid":"https://medium.com/p/158c8a75bb90","author":"Ahmed Mohamed Hussien&lt;Qenawi&gt;","thumbnail":"https://cdn-images-1.medium.com/max/1024/0*xCtwR8J3Gsv0i6th","description":"\n<h3>RecyclerView Filterable -Android</h3>\n<h4>Filter-anything</h4>\n<p><em>It happens quite often that we have a list of items in our Android application. And sometimes this list needs to have filtering capabilities for the users so they can find the relevant results in a list. In this post I am going to demonstrate how to achieve this\u00a0target.</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*xCtwR8J3Gsv0i6th\"><figcaption>SPhoto by <a href=\"https://unsplash.com/@cgower?utm_source=medium&amp;utm_medium=referral\">Christopher Gower</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p><em>Adapter</em></p>\n<p><a href=\"https://gist.github.com/Qenawi/d56bb148da364ce21d0d58f89dad3fba\">https://gist.github.com/Qenawi/d56bb148da364ce21d0d58f89dad3fba</a></p>\n<p>Filter-object</p>\n<p><a href=\"https://gist.github.com/Qenawi/b62302bc577e09abd23801f2daf8bf54\">https://gist.github.com/Qenawi/b62302bc577e09abd23801f2daf8bf54</a></p>\n<p><em>View</em></p>\n<pre>private var <strong>filter </strong>= MyFilter() // init filter</pre>\n<pre>var <strong>adapter</strong>= MyAdapter(ArrayList()) //init adapter</pre>\n<pre>// view logic..........</pre>\n<pre><strong>adapter</strong>.<strong>filter</strong>.filter(<strong>filter</strong>.<strong>ToJson</strong>().toString()) <br>//call filter function</pre>\n<blockquote>That\u2019s it.</blockquote>\n<p><strong>You can access the full source code of this example at the following GitHub repository</strong></p>\n<p><a href=\"https://github.com/Qenawi\">https://github.com/Qenawi</a></p>\n<p>Feel free to leave a comment or give a clap\u00a0\ud83d\udc4f</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=158c8a75bb90\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>RecyclerView Filterable -Android</h3>\n<h4>Filter-anything</h4>\n<p><em>It happens quite often that we have a list of items in our Android application. And sometimes this list needs to have filtering capabilities for the users so they can find the relevant results in a list. In this post I am going to demonstrate how to achieve this\u00a0target.</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*xCtwR8J3Gsv0i6th\"><figcaption>SPhoto by <a href=\"https://unsplash.com/@cgower?utm_source=medium&amp;utm_medium=referral\">Christopher Gower</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p><em>Adapter</em></p>\n<p><a href=\"https://gist.github.com/Qenawi/d56bb148da364ce21d0d58f89dad3fba\">https://gist.github.com/Qenawi/d56bb148da364ce21d0d58f89dad3fba</a></p>\n<p>Filter-object</p>\n<p><a href=\"https://gist.github.com/Qenawi/b62302bc577e09abd23801f2daf8bf54\">https://gist.github.com/Qenawi/b62302bc577e09abd23801f2daf8bf54</a></p>\n<p><em>View</em></p>\n<pre>private var <strong>filter </strong>= MyFilter() // init filter</pre>\n<pre>var <strong>adapter</strong>= MyAdapter(ArrayList()) //init adapter</pre>\n<pre>// view logic..........</pre>\n<pre><strong>adapter</strong>.<strong>filter</strong>.filter(<strong>filter</strong>.<strong>ToJson</strong>().toString()) <br>//call filter function</pre>\n<blockquote>That\u2019s it.</blockquote>\n<p><strong>You can access the full source code of this example at the following GitHub repository</strong></p>\n<p><a href=\"https://github.com/Qenawi\">https://github.com/Qenawi</a></p>\n<p>Feel free to leave a comment or give a clap\u00a0\ud83d\udc4f</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=158c8a75bb90\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["google","filters","kotlin","android","recyclerview"]},{"title":"Non Stop Android Service&lt;Geofencing&gt; Oreo+\u270c\ufe0f\u270c\ufe0f","pubDate":"2019-07-29 10:05:59","link":"https://medium.com/@Qenawi/non-stop-android-service-geofencing-oreo-%EF%B8%8F-%EF%B8%8F-d708a78d6e81?source=rss-d603c7900927------2","guid":"https://medium.com/p/d708a78d6e81","author":"Ahmed Mohamed Hussien&lt;Qenawi&gt;","thumbnail":"https://cdn-images-1.medium.com/max/1024/0*lGFp2bCSgsIh6mzo","description":"\n<h3>Background-Service</h3>\n<h3>Service Limit-Hacked</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*lGFp2bCSgsIh6mzo\"><figcaption>Photo by <a href=\"https://unsplash.com/@jaehunpark?utm_source=medium&amp;utm_medium=referral\">Jae Park</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>its a Bit hard to launch a non stop service in android 8+ Due to Android 8 Background execution limits\u00a0,Which covered in link\u00a0below</p>\n<p><a href=\"https://developer.android.com/about/versions/oreo/background\">Background Execution Limits | Android Developers</a></p>\n<p><strong>How to launch a non stop service\u00a0?</strong></p>\n<p>by restarting it from time to time\u00a0,cause android system will some how kill the service (Foreground/Background)at any\u00a0time.</p>\n<p><strong>How to restart the service\u00a0?</strong></p>\n<p>.Throw Silent Push Notification (contain payload\u00a0data)</p>\n<p>. job scheduler After { N }Time restart service if conditions matches what you\u00a0need</p>\n<p>. workmanager\u00a0, alarm\u00a0,\u00a0etc\u2026.</p>\n<p><strong>Launching service</strong></p>\n<a href=\"https://medium.com/media/82ef80c6f9dd6990a8a866b0bf81de57/href\">https://medium.com/media/82ef80c6f9dd6990a8a866b0bf81de57/href</a><p>Now The Service (<a href=\"https://gist.github.com/Qenawi/1802e62773617ff5123b77b8f344398c#file-oreobroadcastreciverforgroundservice-kt\">OreoBroadCastReciverForGroundService</a>) is our non stop service\u00a0, target from making it non stop is to use its context to create GPS on/off listener using Broadcast receiver to re register geofence on any unexpected event that can stop geofence which is mentioned in link below\u00a0,</p>\n<p><a href=\"https://developer.android.com/training/location/geofencing\">Create and monitor geofences | Android Developers</a></p>\n<p>our service can be re launched using silent push (payload push notification)</p>\n<p>cause if it was a normal push android will handle it automatically if app was in the background \ud83d\ude0e.</p>\n<pre>ServiceManger.startGpsService(contex) // onMessageReceived</pre>\n<p>and i hope this small article was helpful as its my first participation on medium\u270c\ufe0f\u270c\ufe0f\u270c\ufe0f and it will be more the welcome to help any one\u00a0.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d708a78d6e81\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>Background-Service</h3>\n<h3>Service Limit-Hacked</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*lGFp2bCSgsIh6mzo\"><figcaption>Photo by <a href=\"https://unsplash.com/@jaehunpark?utm_source=medium&amp;utm_medium=referral\">Jae Park</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>its a Bit hard to launch a non stop service in android 8+ Due to Android 8 Background execution limits\u00a0,Which covered in link\u00a0below</p>\n<p><a href=\"https://developer.android.com/about/versions/oreo/background\">Background Execution Limits | Android Developers</a></p>\n<p><strong>How to launch a non stop service\u00a0?</strong></p>\n<p>by restarting it from time to time\u00a0,cause android system will some how kill the service (Foreground/Background)at any\u00a0time.</p>\n<p><strong>How to restart the service\u00a0?</strong></p>\n<p>.Throw Silent Push Notification (contain payload\u00a0data)</p>\n<p>. job scheduler After { N }Time restart service if conditions matches what you\u00a0need</p>\n<p>. workmanager\u00a0, alarm\u00a0,\u00a0etc\u2026.</p>\n<p><strong>Launching service</strong></p>\n<a href=\"https://medium.com/media/82ef80c6f9dd6990a8a866b0bf81de57/href\">https://medium.com/media/82ef80c6f9dd6990a8a866b0bf81de57/href</a><p>Now The Service (<a href=\"https://gist.github.com/Qenawi/1802e62773617ff5123b77b8f344398c#file-oreobroadcastreciverforgroundservice-kt\">OreoBroadCastReciverForGroundService</a>) is our non stop service\u00a0, target from making it non stop is to use its context to create GPS on/off listener using Broadcast receiver to re register geofence on any unexpected event that can stop geofence which is mentioned in link below\u00a0,</p>\n<p><a href=\"https://developer.android.com/training/location/geofencing\">Create and monitor geofences | Android Developers</a></p>\n<p>our service can be re launched using silent push (payload push notification)</p>\n<p>cause if it was a normal push android will handle it automatically if app was in the background \ud83d\ude0e.</p>\n<pre>ServiceManger.startGpsService(contex) // onMessageReceived</pre>\n<p>and i hope this small article was helpful as its my first participation on medium\u270c\ufe0f\u270c\ufe0f\u270c\ufe0f and it will be more the welcome to help any one\u00a0.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d708a78d6e81\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["geofencing","android","kotlin","android-app-development","services"]}]}